from functools import partial
from datetime import datetime, timedelta
from flask import Blueprint
from code.api.schemas import ObservableSchema
from code.api.utils import get_json, get_jwt, jsonify_data, jsonify_errors, format_docs  # MODIFY THIS LINE
from flask import Blueprint, current_app, jsonify, g
from code.api.malwarebazaar import query_hash
from decimal import Decimal
import json



def group_observables(relay_input):
    # Leave only unique observables ( deduplicate observable )  and select some specific observable type
    result = []
    for observable in relay_input:
        o_value = observable['value']
        o_type = observable['type'].lower()

        # Get only supported types by this third party
        if o_type in current_app.config['CCT_OBSERVABLE_TYPES']:
            obj = {'type': o_type, 'value': o_value}
            if obj in result:
                continue
            result.append(obj)
    return result

def build_input_api(observables):
    # formating, cleanup
    for observable in observables:
        o_value = observable['value']
        o_type = observable['type'].lower()
        if current_app.config['CCT_OBSERVABLE_TYPES'][o_type].get('sep'):
            o_value = o_value.split(
                current_app.config['CCT_OBSERVABLE_TYPES'][o_type]['sep'])[-1]
            observable['value'] = o_value
    return observables

enrich_api = Blueprint('enrich', __name__)
get_observables = partial(get_json, schema=ObservableSchema(many=True))

@enrich_api.route('/refer/observables', methods=['POST'])
def refer_observables():
    relay_input = get_json(ObservableSchema(many=True))
    observables = group_observables(relay_input)
    data = []
    if not observables:
        return ({})
    observables = build_input_api(observables)
    for observable in observables:
        o_value = observable['value']
        o_type = observable['type'].lower()
        query_data = query_hash(o_value)
        if json.loads(query_data)['query_status'] == "hash_not_found":
            return ({})
        first_seen = json.loads(query_data)['data'][0]['first_seen']
        file_name = json.loads(query_data)['data'][0]['file_name']
        file_type = json.loads(query_data)['data'][0]['file_type']
        file_type_mime = json.loads(query_data)['data'][0]['file_type_mime']
        signature = json.loads(query_data)['data'][0]['signature']
        #tags = ', '.join(json.loads(query_data)['data'][0]['tags'])
        #tags = json.loads(query_data)['data'][0]['tags']
        tags = ''

        refer_url = 'https://bazaar.abuse.ch/sample/{}'.format(o_value)
        data.append(
            {
                'id': 'ref-malwarebazaar-{}-{}'.format(o_type, o_value),
                'title': 'View in MalwareBazaare Database',
                'description': f'First Time See : {first_seen}, Filename : {file_name}, File Type : {file_type}, File Type Mime : {file_type_mime}, Signature : {signature}, Tags : {tags}',
                'url': refer_url,
                'categories': ['Enrich', 'Intel']
            }
              )
        for reference in json.loads(query_data)['data'][0]['file_information']:
            if 'http' in reference['value']:
                data.append(
                    {
                        'id': 'ref-malwarebazaar_link-{}-{}-{}'.format(reference['context'], o_type, o_value),
                        'title': 'More information from {}'.format(reference['context']),
                        'description': '{}'.format(reference['value']),
                        'url': reference['value'],
                        'categories': ['Enrich', 'Intel']
                    }
                    )
    return jsonify_data(data)


@enrich_api.route('/deliberate/observables', methods=['POST'])
def deliberate_observables():
    relay_input = get_json(ObservableSchema(many=True))
    observables = group_observables(relay_input)
    data = {}
    g.verdicts = []
    if not observables:
        return ({})
    observables = build_input_api(observables)
    for observable in observables:
        o_value = observable['value']
        o_type = observable['type'].lower()
        query_data = query_hash(o_value)
        start_time = datetime.utcnow()
        end_time = start_time + timedelta(weeks=1)
        valid_time = {
            'start_time': start_time.isoformat() + 'Z',
            'end_time': end_time.isoformat() + 'Z',
        }

        if 'MALWARE' in query_data or 'Malware' in query_data or 'malware' in query_data or 'Malicious' in query_data or 'MALICIOUS' in query_data or 'malicious' in query_data :
            verdict = {
                'type': 'verdict',
                'observable': {'type': o_type, 'value': o_value},
                'disposition': 2,
                'disposition_name': 'Malicious',
                'valid_time': valid_time
                }
            g.verdicts.append(verdict)
            if g.verdicts:
                data['verdicts'] = format_docs(g.verdicts)
            result = {'data': data}
            return jsonify(result)

        elif 'suspicious' in query_data or 'SUSPICIOUS' in query_data:
            verdict = {
                'type': 'verdict',
                'observable': {'type': o_type, 'value': o_value},
                'disposition': 3,
                'disposition_name': 'Suspicious',
                'valid_time': valid_time
            }
            g.verdicts.append(verdict)
            if g.verdicts:
                data['verdicts'] = format_docs(g.verdicts)

    result = {'data': data}
    return jsonify(result)

