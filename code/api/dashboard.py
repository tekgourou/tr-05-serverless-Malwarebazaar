from flask import Blueprint
from datetime import datetime, timedelta
from functools import partial
from code.api.schemas import DashboardTileSchema, DashboardTileDataSchema, ObservableSchema, ActionFormParamsSchema
from code.api.utils import jsonify_data, get_jwt, get_json
from code.api.malwarebazaar import query_tag, query_the_last_samples
import json
import re

dashboard_api = Blueprint('dashboard', __name__)
get_dashboardtile_form_params = partial(get_json, schema=DashboardTileSchema())
get_dashboardtiledata_form_params = partial(get_json, schema=DashboardTileDataSchema())

def set_valid_time():
    return {
        'start_time': str(datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ")),
        'end_time': str((datetime.now() + timedelta(minutes=1)).strftime("%Y-%m-%dT%H:%M:%S.%fZ"))
    }
def set_observed_time(timeframe_in_sec):
    return {
        'start_time': str((datetime.now() - timedelta(seconds=timeframe_in_sec)).strftime("%Y-%m-%dT%H:%M:%S.%fZ")),
        'end_time': str(datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ"))

    }

def create_tile_data_sample_from_tag(data, tag):
    valid_time = set_valid_time()
    observed_time = set_observed_time(3600)
    data_json = json.loads(data)['data']
    data = []
    data.append('[MalwareBazaar](https://bazaar.abuse.ch/browse/)')
    data.append('&nbsp;')
    data.append('| First time Seen | File Type | File Name | Signature | File Type | Tag(S) | SHA256 |')
    data.append('| -- | -- | -- | -- | -- | -- | -- |')
    for sample in data_json:
        line = '| {} | {} | {} | {} | {} | {} | {} |'.format(sample['first_seen'], sample['file_type'], sample['file_name'], sample['signature'], sample['file_type_mime'], sample['tags'], sample['sha256_hash'])
        data.append(line)

    data = {
        'valid_time': valid_time,
        'hide_legend': True,
        'cache_scope': 'org',
        'observed_time': observed_time,
        'data': data
        }
    return data

def create_tile_data_sample_recent(data):
    valid_time = set_valid_time()
    observed_time = set_observed_time(3600)
    data_json = json.loads(data)['data']
    data = []
    data.append('[MalwareBazaar](https://bazaar.abuse.ch/browse/)')
    data.append('&nbsp;')
    data.append('| First time Seen | File Type | File Name | Signature | File Type | Tag(S) | SHA256 |')
    data.append('| -- | -- | -- | -- | -- | -- | -- |')
    for sample in data_json:
        #tags = ', '.join(json.loads(sample)['data'][0]['tags'])
        line = '| {} | {} | {} | {} | {} | {} | {} |'.format(sample['first_seen'], sample['file_type'], sample['file_name'], sample['signature'], sample['file_type_mime'], sample['tags'], sample['sha256_hash'])
        data.append(line)

    data = {
        'valid_time': valid_time,
        'hide_legend': True,
        'cache_scope': 'org',
        'observed_time': observed_time,
        'data': data
        }
    return data

def get_tile(description, tags, tile_type, title, tile_id):
    return {
        'description': description,
        'periods': [
            'last_24_hours'
        ],
        'tags': tags,
        'type': tile_type,
        'short_description': description,
        'title': title,
        'default_period': 'last_24_hours',
        'id': tile_id
    }

@dashboard_api.route('/tiles', methods=['POST'])
def tiles():
    tags = get_jwt()
    tags = tags.split()
    data = []

    # Tiles for each TAG
    for tag in tags:
        title = 'Get the recent malware sample with TAG {}'.format(tag)
        tags = ['malwarebazaar']
        tile_type = 'markdown'
        description = 'Show the recent malware sample with TAG {}'.format(tag)
        tile_id = 'malware_sample_tag_{}'.format(tag)
        data.append(get_tile(description, tags, tile_type, title, tile_id))

    # Tile for all recent malware samples
    title = 'Get the recent malware sample'
    tags = ['malwarebazaar']
    tile_type = 'markdown'
    description = 'Show the recent malware sample'
    tile_id = 'malware_sample_recent'
    data.append(get_tile(description, tags, tile_type, title, tile_id))

    return jsonify_data(data)

@dashboard_api.route('/tiles/tile', methods=['POST'])
def tile():
    get_jwt()
    return jsonify_data({})

@dashboard_api.route('/tiles/tile-data', methods=['POST'])
def tile_data():
    data = []
    params = get_dashboardtiledata_form_params()
    if 'malware_sample_recent' in params['tile_id']:
        data = query_the_last_samples(100)
        data = create_tile_data_sample_recent(data)
    elif 'malware_sample_tag' in params['tile_id']:
        tag = re.findall(r"(?<=malware_sample_tag_).*", params['tile_id'])
        data = query_tag(tag)
        data = create_tile_data_sample_from_tag(data, tag)
    else:
        return jsonify_data(data)

    return jsonify_data(data)
